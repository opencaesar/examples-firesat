/* 
 * The Maven coordinates for the project artifact
 */
ext.title = "FireSat Example"
description='The FireSat example project'
group = 'io.opencaesar.ontologies'
version = '4.0.0'

apply from: "${rootDir}/gradle/maven-deployment.gradle"

/* 
 * The Gradle task dependencies 
 */
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'io.opencaesar.owl:owl-fuseki-gradle:2.+'
        classpath 'io.opencaesar.owl:owl-shacl-fuseki-gradle:2.+'
        classpath 'io.opencaesar.owl:owl-query-gradle:2.+'
        classpath 'io.opencaesar.owl:owl-load-gradle:2.+'
        classpath 'io.opencaesar.owl:owl-reason-gradle:2.+'
        classpath 'io.opencaesar.owl:owl-doc-gradle:2.+'
        classpath 'io.opencaesar.oml:oml-merge-gradle:2.+'
        classpath 'io.opencaesar.adapters:oml2owl-gradle:2.+'
    }
}

// Dataset-specific variables
ext {
    // Name of dataset (matches one used in .fuseki.ttl file)
    dataset = 'firesat'
    // Root ontology IRI of the dataset
    rootIri = 'http://opencaesar.io/examples/firesat/bundle'
}

/*
 * The repositories to look up OML dependencies in
 */
repositories {
    mavenLocal()
    mavenCentral()
}

/*
 * The configuration of OML dependencies
 */
configurations {
    oml
}

/*
 * The OML dependencies
 */
dependencies {
    oml "io.opencaesar.ontologies:imce-vocabularies:4.+"
}

/*
 * A task to extract and merge the OML dependencies
 */
task downloadDependencies(type:io.opencaesar.oml.merge.OmlMergeTask) {
    inputZipPaths = configurations.oml.files
    outputCatalogFolder = file('build/oml')
}

/*
 * A task to convert the OML catalog to OWL catalog
 */
task omlToOwl(type:io.opencaesar.oml2owl.Oml2OwlTask, dependsOn: downloadDependencies) {
    // OML catalog
    inputCatalogPath = file('catalog.xml')
    // OWL catalog
    outputCatalogPath = file('build/owl/catalog.xml')
}

/*
 * A task to run the Openllet reasoner on the OWL catalog
 */
task owlReason(type:io.opencaesar.owl.reason.OwlReasonTask, dependsOn: omlToOwl) {
    // OWL catalog
    catalogPath = file('build/owl/catalog.xml')
    // Input ontology IRI to reason on
    inputOntologyIri = 'http://opencaesar.io/examples/firesat/bundle'
    // Entailment statements to generate and the ontologies to persist them in
    specs = [
        "$rootIri/classes = ALL_SUBCLASS",
        "$rootIri/properties = INVERSE_PROPERTY | ALL_SUBPROPERTY",
        "$rootIri/individuals = ALL_INSTANCE | DATA_PROPERTY_VALUE | OBJECT_PROPERTY_VALUE | SAME_AS"
    ]
    // Junit error report
    reportPath = file('build/reports/reasoning.xml')
}

/*
 * A task to generate documentation for the OWL catalog
 */
task generateDocs (type: io.opencaesar.owl.doc.OwlDocTask, dependsOn: owlReason) {
    // OWL catalog
    inputCatalogPath = file('build/owl/catalog.xml')
    // OWL catalog title
    inputCatalogTitle = project.title
    // OWL catalog version
    inputCatalogVersion = project.version
    // OWL Ontology Iris
    inputOntologyIris = [ "$rootIri/classes", "$rootIri/properties",  "$rootIri/individuals" ]
    // Output folder
    outputFolderPath = file('build/doc')
    // Output case sensitivie path
    outputCaseSensitive = org.gradle.internal.os.OperatingSystem.current().isLinux()
}

/*
 * Start the Fuseki server
 */
task startFuseki(type: io.opencaesar.owl.fuseki.StartFusekiTask) {
    configurationPath = file('.fuseki.ttl')
    outputFolderPath = file('.fuseki')
}

/*
 * A task to load an OWL catalog to a Fuseki dataset endpoint
 */
task owlLoad(type:io.opencaesar.owl.load.OwlLoadTask, dependsOn: owlReason) {
    inputs.files(startFuseki.outputFolderPath) // rerun when fuseki restarts
    catalogPath = file('build/owl/catalog.xml')
    endpointURL = "http://localhost:3030/$dataset"
    fileExtensions = ['owl', 'ttl']
    iris = [ "$rootIri/classes", "$rootIri/properties",  "$rootIri/individuals" ]
}

/*
 * A task to run a set of SPARQL queries on a Fuseki dataset endpoint
 */
task owlQuery(type:io.opencaesar.owl.query.OwlQueryTask, dependsOn: owlLoad) {
    inputs.files(owlLoad.inputs.files) // rerun when the dataset changes
    endpointURL = 'http://localhost:3030/firesat'
    queryPath = file('src/sparql')
    resultPath = file('build/results')
}

/*
 * A task to run a set of SHACL validation rules on a Fuseki dataset endpoint
 */
task owlShacl(type:io.opencaesar.owl.shacl.fuseki.OwlShaclFusekiTask, dependsOn: owlLoad) {
    inputs.files(owlLoad.inputs.files) // rerun when the dataset changes
    endpointURL = 'http://localhost:3030/firesat'
    queryPath = file('src/shacl')
    resultPath = file('build/reports')
}

/*
 * Stop the Fuseki server
 */
task stopFuseki(type: io.opencaesar.owl.fuseki.StopFusekiTask) {
	mustRunAfter owlQuery, owlLoad, owlShacl
    outputFolderPath = file('.fuseki')
}

/*
 * A task to build the project, which executes several tasks together
 */
tasks.named('build') {
    dependsOn owlReason
}

/*
 * Publish artifacts
 */

task omlZip(type: Zip) {
    from file('src/oml')
    include "**/*.oml"
    destinationDirectory = file('build/libs')
    archiveBaseName = project.name
    archiveVersion = project.version
}

publishing.publications.maven.artifact omlZip

task vocabularyZip(type: Zip) {
    from file('src/oml')
    include "imce.jpl.nasa.gov/**/*.oml"
    destinationDirectory = file('build/libs')
    archiveBaseName = project.name
    archiveVersion = project.version
    archiveClassifier = 'vocabularies'
}

publishing.publications.maven.artifact vocabularyZip

/*
 * Integration with the Eclipse IDE
 */ 
apply plugin: 'eclipse'

eclipse {
    synchronizationTasks downloadDependencies
}
